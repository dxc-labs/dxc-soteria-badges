AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: Badges StorageLambda Stack

#!#########################################################################################
#! Parameters:
#!#########################################################################################
Parameters:
    StackName:
        Type: String
        Description: StackName for resources

    OpenApiBucket:
        Type: String
        Description: CF Bucket Name

    UserDomainName:
        Type: String
        Description: UserDomainName

    ApiDomainName:
        Type: String
        Description: Api DomainName

    applePassKitBucket:
        Type: String
        Description: Pass Locator

    CanaryDeploymentType:
        Type: String
        Description: Deployment Preference Type
        Default: "Canary10Percent5Minutes"

    OverrideDashboardsApi:
        Type: String
        Description: Override Base URL of the Dashboards API

    OverrideTenant4Logo:
        Type: String
        Description: "Override tenant name"

    CognitoUserPoolArn:
        Type: String
        Description: Cognito User Pool ARN

###########################################################################################
## Conditions:
###########################################################################################
Conditions:
  IsOverrideDashboardsApi: !Not [ !Equals [ !Ref OverrideDashboardsApi, none] ]
  IsOverrideTenant4Logo: !Not [ !Equals [ !Ref OverrideTenant4Logo, none ] ]

###########################################################################################
## Globals:
###########################################################################################
Globals:
    Function:
        Handler: index.handler
        Runtime: nodejs12.x
        Timeout: 5
        MemorySize: 128
        AutoPublishAlias: live
        DeploymentPreference:
            Type: !Ref CanaryDeploymentType
            # Hooks:
            #   # Validation Lambda functions that are run before & after traffic shifting
            #   PreTraffic: !Ref PreTrafficLambdaFunction
            #   PostTraffic: !Ref PostTrafficLambdaFunction

#!#########################################################################################
#! Resources:
#!#########################################################################################
Resources:
    #*##############################################
    #* AWS::DynamoDB::*
    #*##############################################

    RequestsDatabase:
        Type: AWS::DynamoDB::Table
        Properties:
            TableName: !Sub "${StackName}-requests"
            AttributeDefinitions:
                - AttributeName: requestId
                  AttributeType: S
                - AttributeName: email
                  AttributeType: S
            KeySchema:
                - AttributeName: requestId
                  KeyType: HASH
            GlobalSecondaryIndexes:
            - IndexName: EmailIndex
              KeySchema:
              - AttributeName: email
                KeyType: HASH
              Projection:
                ProjectionType: ALL
            StreamSpecification:
                StreamViewType: NEW_AND_OLD_IMAGES
            PointInTimeRecoverySpecification:
                PointInTimeRecoveryEnabled: True
            TimeToLiveSpecification:
                AttributeName: ttl
                Enabled: True
            BillingMode: PAY_PER_REQUEST
            Tags:
                - Key: ApplicationName
                  Value: !Sub ${StackName}

    SitesDatabase:
        Type: AWS::DynamoDB::Table
        Properties:
            TableName: !Sub "${StackName}-sites"
            AttributeDefinitions:
                - AttributeName: locationId
                  AttributeType: S
            KeySchema:
                - AttributeName: locationId
                  KeyType: HASH
            StreamSpecification:
                StreamViewType: NEW_AND_OLD_IMAGES
            PointInTimeRecoverySpecification:
                PointInTimeRecoveryEnabled: True
            TimeToLiveSpecification:
                AttributeName: ttl
                Enabled: True
            BillingMode: PAY_PER_REQUEST
            Tags:
                - Key: ApplicationName
                  Value: !Sub ${StackName}

    BadgesAPIGatewayExecuteRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: Allow
                      Principal:
                        Service:
                          - apigateway.amazonaws.com
                          - lambda.amazonaws.com
                          - edgelambda.amazonaws.com
                      Action: sts:AssumeRole
            Policies:
                - PolicyName: BadgesGatewayExecutePolicy
                  PolicyDocument:
                    Version: "2012-10-17"
                    Statement:
                      - Effect: Allow
                        Action:
                          - lambda:InvokeFunction
                          - lambda:PublishVersion
                          - dynamodb:*
                          - lambda:*
                          - s3:*
                          - logs:*
                          - ssm:*
                        Resource:
                          - !GetAtt BadgeGet.Arn
                          - !GetAtt BadgeInsert.Arn
                          - !GetAtt BadgeRevoke.Arn
                          - !GetAtt GateKeeperTokenGet.Arn
                          - !GetAtt BadgeDelete.Arn
            ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

    BadgesGatewayExecuteRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                  - Effect: Allow
                    Principal:
                      Service:
                        - lambda.amazonaws.com
                        - edgelambda.amazonaws.com
                    Action: sts:AssumeRole
            Policies:
                - PolicyName: BadgesGatewayExecutePolicy
                  PolicyDocument:
                    Version: "2012-10-17"
                    Statement:
                      - Effect: Allow
                        Action:
                          - lambda:InvokeFunction
                          - lambda:PublishVersion
                          - dynamodb:*
                          - lambda:*
                          - s3:*
                          - logs:*
                          - ssm:*
                          - ses:SendEmail
                          - ses:SendRawEmail
                        Resource: "*"
            ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

    # ##############################################
    # # AWS::Lambda::*
    # ##############################################
    BadgesLambdaLayer:
        Type: AWS::Serverless::LayerVersion
        Properties:
            CompatibleRuntimes:
              - nodejs12.x
            ContentUri: ./../../packages/layer
            Description: Lambda layer for badges
            LayerName: !Sub "${StackName}-layer"

    BadgeGet:
        Type: AWS::Serverless::Function
        Properties:
            FunctionName: !Sub "${StackName}-badgeGet"
            CodeUri: ./../../packages/badgeGet
            Environment:
                Variables:
                    BadgesTableName: !Sub "${StackName}-requests"
                    SitesTableName: !Sub "${StackName}-sites"
                    splitTokenKey: !Sub "${StackName}-splitTokenKey"
            Description: BadgeGet
            Role: !GetAtt BadgesGatewayExecuteRole.Arn
            Policies:
                - DynamoDBCrudPolicy:
                    TableName: !Sub "${StackName}-requests"
                    SitesTableName: !Sub "${StackName}-sites"
            Layers:
                - !Ref BadgesLambdaLayer
            Tags:
                System: !Ref AWS::StackName

    BadgeInsert:
        Type: AWS::Serverless::Function
        Properties:
            FunctionName: !Sub "${StackName}-badgeInsert"
            CodeUri: ./../../packages/badgeInsert
            Environment:
                Variables:
                    BadgesTableName: !Sub "${StackName}-requests"
                    testCaseEmailListParamName: !Sub "${StackName}-testCaseEmailList"
                    enableTestModeParamName: !Sub "${StackName}-enableTestMode"
                    splitTokenKey: !Sub "${StackName}-splitTokenKey"
                    sourceEmailId: !Sub "r2w@${UserDomainName}"
                    applePassKitBucket: !Sub "${applePassKitBucket}"
                    passLocator: !Sub "https://${UserDomainName}/badges/"
                    appleCertificate: !Sub "${StackName}-appleCertificate"
                    appleCertificateKey: !Sub "${StackName}-appleCertificateKey"
                    applePassTypeIdentifier: !Sub "${StackName}-applePassTypeIdentifier"
                    appleTeamIdentifier: !Sub "${StackName}-appleTeamIdentifier"
                    applePassValidityInDays: !Sub "${StackName}-applePassValidityInDays"
                    testUserListParamName: !Sub "${StackName}-testUserList"
                    dashboardEmailAPIBaseURL: !If [IsOverrideDashboardsApi, !Ref OverrideDashboardsApi, !Sub "https://${ApiDomainName}/dashboards/ext/sendtemplatemail"]
                    dashboardsAPIKeySSMName: !Sub "${StackName}-dashboardsAPIKey"
                    emailTemplateSendBadgeLinkToEmployee: !Sub "${StackName}-SendBadgeLinkToEmployee"
                    emailTemplateSendBadgeLinkToVisitor: !Sub "${StackName}-SendBadgeLinkToVisitor"
                    userDomainName : !Ref UserDomainName
                    useTenant4Logo: !If [IsOverrideTenant4Logo, !Ref OverrideTenant4Logo, !Select [1, !Split ['-', !Ref AWS::StackName]]]
            Description: BadgeInsert
            Role: !GetAtt BadgesGatewayExecuteRole.Arn
            Timeout: 60
            Policies:
                - DynamoDBCrudPolicy:
                      TableName: !Sub "${StackName}-requests"
            Layers:
                - !Ref BadgesLambdaLayer
            Tags:
                System: !Ref AWS::StackName

    BadgeRevoke:
        Type: AWS::Serverless::Function
        Properties:
            FunctionName: !Sub "${StackName}-badgeRevoke"
            CodeUri: ./../../packages/badgeRevoke
            Environment:
                Variables:
                    BadgesTableName: !Sub "${StackName}-requests"
                    sourceEmailId: !Sub "r2w@${UserDomainName}"
                    dashboardEmailAPIBaseURL: !If [IsOverrideDashboardsApi, !Ref OverrideDashboardsApi, !Sub "https://${ApiDomainName}/dashboards/ext/sendtemplatemail"]
                    dashboardsAPIKeySSMName: !Sub "${StackName}-dashboardsAPIKey"
                    emailTemplateNotifyRevocationToEmployeeBadge: !Sub "${StackName}-NotifyRevocationToEmployeeBadge"
                    emailTemplateNotifyRevocationToVisitorBadge: !Sub "${StackName}-NotifyRevocationToVisitorBadge"
            Description: BadgeRevoke
            Role: !GetAtt BadgesGatewayExecuteRole.Arn
            Timeout: 60
            Policies:
                - DynamoDBCrudPolicy:
                      TableName: !Sub "${StackName}-requests"
            Layers:
                - !Ref BadgesLambdaLayer
            Tags:
                System: !Ref AWS::StackName

    GateKeeperTokenGet:
        Type: AWS::Serverless::Function
        Properties:
            FunctionName: !Sub "${StackName}-gateKeeperTokenGet"
            CodeUri: ./../../packages/gateKeeperTokenGet
            Environment:
                Variables:
                    SitesTableName: !Sub "${StackName}-sites"
                    splitTokenKey: !Sub "${StackName}-splitTokenKey"
            Description: GateKeeperTokenGet
            Role: !GetAtt BadgesGatewayExecuteRole.Arn
            Policies:
                - DynamoDBCrudPolicy:
                      TableName: !Sub "${StackName}-sites"
            Layers:
                - !Ref BadgesLambdaLayer
            Tags:
                System: !Ref AWS::StackName

    BadgeDelete:
        Type: AWS::Serverless::Function
        Properties:
            FunctionName: !Sub "${StackName}-badgeDelete"
            CodeUri: ./../../packages/badgeDelete
            Environment:
                Variables:
                    BadgesTableName: !Sub "${StackName}-requests"
                    applePassKitBucket: !Sub "${applePassKitBucket}"
                    emailIndex: EmailIndex
            Description: userDelete
            Role: !GetAtt BadgesGatewayExecuteRole.Arn
            Policies:
                - DynamoDBCrudPolicy:
                      TableName: !Sub "${StackName}-requests"
            Layers:
                - !Ref BadgesLambdaLayer
            Tags:
                System: !Ref AWS::StackName

    # PreTrafficLambdaFunction:
    #     Type: AWS::Serverless::Function
    #     Properties:
    #         Handler: preTrafficHook.handler
    #         Runtime: nodejs12.x
    #         CodeUri: ./../../packages/preTrafficHook
    #         Policies:
    #             - Version: "2012-10-17"
    #               Statement:
    #               - Effect: "Allow"
    #                 Action:
    #                   - "codedeploy:PutLifecycleEventHookExecutionStatus"
    #                 Resource:
    #                   !Sub 'arn:${AWS::Partition}:codedeploy:${AWS::Region}:${AWS::AccountId}:deploymentgroup:${ServerlessDeploymentApplication}/*'
    #             - Version: "2012-10-17"
    #               Statement:
    #               - Effect: "Allow"
    #                 Action:
    #                   - "lambda:InvokeFunction"
    #                 Resource:
    #                   - !GetAtt BadgeGet.Arn
    #                   - !GetAtt BadgeInsert.Arn
    #                   - !GetAtt RequestProcess.Arn
    #                   - !GetAtt BadgeRevoke.Arn
    #                   - !GetAtt GateKeeperTokenGet.Arn
    #         FunctionName:
    #             !Join
    #               - '-'
    #               - - 'CodeDeployHook_preTrafficHook'
    #                 - !Select [1, !Split ['-', !Ref AWS::StackName]]
    #                 - !Select [2, !Split ['-', !Ref AWS::StackName]]
    #                 - !Select [3, !Split ['-', !Ref AWS::StackName]]
    #         DeploymentPreference:
    #             Enabled: False

    # PostTrafficLambdaFunction:
    #     Type: AWS::Serverless::Function
    #     Properties:
    #         Handler: postTrafficHook.handler
    #         Runtime: nodejs12.x
    #         CodeUri: ./../../packages/postTrafficHook
    #         Policies:
    #           - Version: "2012-10-17"
    #             Statement:
    #             - Effect: "Allow"
    #               Action:
    #                 - "codedeploy:PutLifecycleEventHookExecutionStatus"
    #               Resource:
    #                 !Sub 'arn:${AWS::Partition}:codedeploy:${AWS::Region}:${AWS::AccountId}:deploymentgroup:${ServerlessDeploymentApplication}/*'
    #           - Version: "2012-10-17"
    #             Statement:
    #             - Effect: "Allow"
    #               Action:
    #                 - "lambda:InvokeFunction"
    #               Resource:
    #                 - !GetAtt BadgeGet.Arn
    #                 - !GetAtt BadgeInsert.Arn
    #                 - !GetAtt RequestProcess.Arn
    #                 - !GetAtt BadgeRevoke.Arn
    #                 - !GetAtt GateKeeperTokenGet.Arn
    #         FunctionName:
    #             !Join
    #               - '-'
    #               - - 'CodeDeployHook_postTrafficHook'
    #                 - !Select [1, !Split ['-', !Ref AWS::StackName]]
    #                 - !Select [2, !Split ['-', !Ref AWS::StackName]]
    #                 - !Select [3, !Split ['-', !Ref AWS::StackName]]
    #         DeploymentPreference:
    #             Enabled: False

    #*##############################################
    #* AWS::API::*
    #*##############################################

    RAAAPI:
        Type: AWS::Serverless::Api
        Properties:
            Name: !Sub "${StackName}-api"
            StageName: !Select [2, !Split ["-", !Ref AWS::StackName]]
            DefinitionBody:
                "Fn::Transform":
                    Name: "AWS::Include"
                    Parameters:
                        Location: !Sub "s3://${OpenApiBucket}/openapi.yaml"

    ApiGatewayBasePathMapping:
        Type: AWS::ApiGateway::BasePathMapping
        Properties:
            BasePath: !Select [3, !Split ['-', !Ref AWS::StackName]]
            DomainName: !Sub "${ApiDomainName}"
            RestApiId: !Ref RAAAPI
            Stage: !Ref RAAAPI.Stage

    ApiKey:
        Type: "AWS::ApiGateway::ApiKey"
        DependsOn:
            - RAAAPI
        Properties:
            Name: !Sub ${StackName}-apikey
            Description: Badges API Key
            Enabled: "true"
            StageKeys:
                - RestApiId: !Ref RAAAPI
                  StageName: !Ref RAAAPI.Stage

    usagePlan:
        Type: "AWS::ApiGateway::UsagePlan"
        Properties:
            ApiStages:
                - ApiId: !Ref RAAAPI
                  Stage: !Ref RAAAPI.Stage
            Description: Badges usage plan
            # Quota:
            #     Limit: 5000
            #     Period: MONTH
            # Throttle:
            #     BurstLimit: 200
            #     RateLimit: 100
            UsagePlanName: !Sub ${StackName}-usage-plan

    usagePlanKey:
        Type: 'AWS::ApiGateway::UsagePlanKey'
        DependsOn:
            - RAAAPI
            - ApiKey
        Properties:
            KeyId: !Ref ApiKey
            KeyType: API_KEY
            UsagePlanId: !Ref usagePlan

    #!#########################################################################################
    #! Outputs:
    #!#########################################################################################
Outputs:
    BadgesApi:
        Value: !Join
            - ''
            - - 'https://'
              - !Ref RAAAPI
              - .execute-api.
              - !Ref 'AWS::Region'
              - .
              - !Ref 'AWS::URLSuffix'
              - /
              - !Select [2, !Split ['-', !Ref AWS::StackName]]
